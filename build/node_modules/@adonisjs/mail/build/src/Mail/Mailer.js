"use strict";
/*
 * @adonisjs/mail
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mailer = void 0;
const Message_1 = require("../Message");
/**
 * Mailer exposes the unified API to send emails using one of the pre-configure
 * driver
 */
class Mailer {
    constructor(name, manager, useQueue, driver) {
        this.name = name;
        this.manager = manager;
        this.useQueue = useQueue;
        this.driver = driver;
    }
    /**
     * Ensure "@adonisjs/view" is installed
     */
    ensureView(methodName) {
        if (!this.manager.view) {
            throw new Error(`"@adonisjs/view" must be installed before using "message.${methodName}"`);
        }
    }
    /**
     * Set the email contents by rendering the views. Views are only
     * rendered when inline values are not defined.
     */
    async setEmailContent({ message, views }) {
        if (!message.html && views.html) {
            this.ensureView('htmlView');
            message.html = await this.manager.view.render(views.html.template, views.html.data);
        }
        if (!message.text && views.text) {
            this.ensureView('textView');
            message.text = await this.manager.view.render(views.text.template, views.text.data);
        }
        if (!message.watch && views.watch) {
            this.ensureView('watchView');
            message.watch = await this.manager.view.render(views.watch.template, views.watch.data);
        }
    }
    /**
     * Define options to be forwarded to the underlying driver
     */
    options(options) {
        this.driverOptions = options;
        return this;
    }
    /**
     * Sends email using a pre-compiled message. You should use [[MailerContract.send]], unless
     * you are pre-compiling messages yourself
     */
    async sendCompiled(mail) {
        /**
         * Set content by rendering views
         */
        await this.setEmailContent(mail);
        /**
         * Send email for real
         */
        const response = await this.driver.send(mail.message, mail.config);
        /**
         * Emit event
         */
        this.manager.emitter.emit('mail:sent', {
            message: mail.message,
            views: Object.keys(mail.views).map((view) => mail.views[view].template),
            mailer: mail.mailer,
            response: response,
        });
        return response;
    }
    /**
     * Sends email
     */
    async send(callback, config) {
        const message = new Message_1.Message(false);
        await callback(message);
        const compiledMessage = message.toJSON();
        return this.sendCompiled({
            message: compiledMessage.message,
            views: compiledMessage.views,
            mailer: this.name,
            config: config || this.driverOptions,
        });
    }
    /**
     * Send email later by queuing it inside an in-memory queue
     */
    async sendLater(callback, config) {
        if (!this.useQueue) {
            await this.send(callback, config);
            return;
        }
        const message = new Message_1.Message(true);
        await callback(message);
        const compiledMessage = message.toJSON();
        return this.manager.scheduleEmail({
            message: compiledMessage.message,
            views: compiledMessage.views,
            mailer: this.name,
            config: config || this.driverOptions,
        });
    }
    /**
     * Invokes `close` method on the driver
     */
    async close() {
        await this.driver.close();
        this.manager.release(this.name);
    }
}
exports.Mailer = Mailer;
