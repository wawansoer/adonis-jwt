/// <reference path="../../adonis-typings/mail.d.ts" />
/// <reference types="node" />
/// <reference types="node" />
import { Readable } from 'stream';
import { ICalCalendar } from 'ical-generator';
import { EnvolpeNode, MessageNode, MessageContract, CalendarEventOptions, AttachmentOptionsNode, MessageContentViewsNode } from '@ioc:Adonis/Addons/Mail';
/**
 * Fluent API to construct node mailer message object
 */
export declare class Message implements MessageContract {
    private deferred;
    private nodeMailerMessage;
    constructor(deferred?: boolean);
    /**
     * Path to the views used to generate content for the
     * message
     */
    private contentViews;
    /**
     * Returns address node with correctly formatted way
     */
    private getAddress;
    /**
     * Add receipent as `to`
     */
    to(address: string, name?: string): this;
    /**
     * Add `from` name and email
     */
    from(address: string, name?: string): this;
    /**
     * Add receipent as `cc`
     */
    cc(address: string, name?: string): this;
    /**
     * Add receipent as `bcc`
     */
    bcc(address: string, name?: string): this;
    /**
     * Define custom message id
     */
    messageId(messageId: string): this;
    /**
     * Define subject
     */
    subject(message: string): this;
    /**
     * Define replyTo email and name
     */
    replyTo(address: string, name?: string): this;
    /**
     * Define inReplyTo message id
     */
    inReplyTo(messageId: string): this;
    /**
     * Define multiple message id's as references
     */
    references(messagesIds: string[]): this;
    /**
     * Optionally define email envolpe
     */
    envelope(envelope: EnvolpeNode): this;
    /**
     * Define contents encoding
     */
    encoding(encoding: string): this;
    /**
     * Define email prority
     */
    priority(priority: 'low' | 'normal' | 'high'): this;
    /**
     * Compute email html from defined view
     */
    htmlView(template: string, data?: any): this;
    /**
     * Compute email text from defined view
     */
    textView(template: string, data?: any): this;
    /**
     * Compute apple watch html from defined view
     */
    watchView(template: string, data?: any): this;
    /**
     * Compute email html from raw text
     */
    html(content: string): this;
    /**
     * Compute email text from raw text
     */
    text(content: string): this;
    /**
     * Compute email watch html from raw text
     */
    watch(content: string): this;
    /**
     * Define one or attachments
     */
    attach(filePath: string, options?: AttachmentOptionsNode): this;
    /**
     * Define attachment from raw data
     */
    attachData(content: Readable | Buffer, options?: AttachmentOptionsNode): this;
    /**
     * Embed attachment inside content using `cid`
     */
    embed(filePath: string, cid: string, options?: AttachmentOptionsNode): this;
    /**
     * Embed attachment from raw data inside content using `cid`
     */
    embedData(content: Readable | Buffer, cid: string, options?: AttachmentOptionsNode): this;
    /**
     * Define custom headers for email
     */
    header(key: string, value: string | string[]): this;
    /**
     * Define custom prepared headers for email
     */
    preparedHeader(key: string, value: string | string[]): this;
    /**
     * Attach a calendar event and define contents as string
     */
    icalEvent(contents: ((calendar: ICalCalendar) => void) | string, options?: CalendarEventOptions): this;
    /**
     * Attach a calendar event and load contents from a file
     */
    icalEventFromFile(filePath: string, options?: CalendarEventOptions): this;
    /**
     * Attach a calendar event and load contents from a url
     */
    icalEventFromUrl(url: string, options?: CalendarEventOptions): this;
    /**
     * Get message JSON. The packet can be sent over to nodemailer
     */
    toJSON(): {
        message: MessageNode;
        views: MessageContentViewsNode;
    };
}
