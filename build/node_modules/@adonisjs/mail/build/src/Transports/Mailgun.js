"use strict";
/*
 * @adonisjs/mail
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MailgunTransport = void 0;
const got_1 = __importDefault(require("got"));
const multi_part_1 = __importDefault(require("multi-part"));
const utils_1 = require("../utils");
const EmailTransportException_1 = require("../Exceptions/EmailTransportException");
/**
 * Mailgun transport for node mailer. Uses the `/message.mime` to send MIME
 * representation of the email
 */
class MailgunTransport {
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        this.name = 'mailgun';
        this.version = '1.0.0';
    }
    /**
     * Converts a boolean flag to a yes/no string.
     */
    flagToYesNo(value) {
        if (value === undefined) {
            return;
        }
        return value === true ? 'yes' : 'no';
    }
    /**
     * Returns pre-configured otags
     */
    getOTags(config) {
        const tags = new utils_1.ObjectBuilder();
        tags.add('o:tag', config.oTags);
        tags.add('o:dkim', this.flagToYesNo(config.oDkim));
        tags.add('o:testmode', this.flagToYesNo(config.oTestMode));
        tags.add('o:tracking', this.flagToYesNo(config.oTracking));
        tags.add('o:tracking-clicks', this.flagToYesNo(config.oTrackingClick));
        tags.add('o:tracking-opens', this.flagToYesNo(config.oTrackingOpens));
        return tags.toObject();
    }
    /**
     * Returns base url for sending emails
     */
    getBaseUrl() {
        return this.config.domain ? `${this.config.baseUrl}/${this.config.domain}` : this.config.baseUrl;
    }
    /**
     * Returns an object of custom headers
     */
    getHeaders(config) {
        return config.headers || {};
    }
    /**
     * Formats an array of recipients to a string accepted by mailgun
     */
    formatReceipents(recipients) {
        if (!recipients) {
            return;
        }
        return recipients
            .map((recipient) => {
            if (!recipient.name) {
                return recipient.address;
            }
            return `${recipient.name} <${recipient.address}>`;
        })
            .join(',');
    }
    /**
     * Returns an object of `to`, `cc` and `bcc`
     */
    getRecipients(mail) {
        const recipients = new utils_1.ObjectBuilder();
        recipients.add('to', this.formatReceipents(mail.data.to));
        recipients.add('cc', this.formatReceipents(mail.data.cc));
        recipients.add('bcc', this.formatReceipents(mail.data.bcc));
        return recipients.toObject();
    }
    /**
     * Send email
     */
    async send(mail, callback) {
        const tags = this.getOTags(this.config);
        const headers = this.getHeaders(this.config);
        const recipients = this.getRecipients(mail);
        const envelope = mail.message.getEnvelope();
        const form = new multi_part_1.default();
        const url = `${this.getBaseUrl()}/messages.mime`;
        Object.keys(tags).forEach((key) => form.append(key, tags[key]));
        Object.keys(headers).forEach((key) => form.append(key, headers[key]));
        Object.keys(recipients).forEach((key) => form.append('to', recipients[key]));
        form.append('message', mail.message.createReadStream(), { filename: 'message.mime' });
        this.logger.trace({
            url,
            tags,
            headers,
        }, 'mailgun email');
        try {
            const response = await got_1.default.post(url, {
                body: form.stream(),
                username: 'api',
                password: this.config.key,
                responseType: 'json',
                headers: {
                    ...form.getHeaders(),
                },
            });
            const messageId = (response.body?.id || mail.message.messageId()).replace(/^<|>$/g, '');
            callback(null, { messageId, envelope });
        }
        catch (error) {
            callback(EmailTransportException_1.EmailTransportException.apiFailure(error));
        }
    }
}
exports.MailgunTransport = MailgunTransport;
