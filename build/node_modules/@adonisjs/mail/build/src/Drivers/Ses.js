"use strict";
/*
 * @adonisjs/mail
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SesDriver = void 0;
/// <reference path="../../adonis-typings/mail.ts" />
const aws = __importStar(require("aws-sdk"));
const nodemailer_1 = __importDefault(require("nodemailer"));
/**
 * Ses driver to send email using ses
 */
class SesDriver {
    constructor(config) {
        this.transporter = nodemailer_1.default.createTransport({
            SES: new aws.SES({
                apiVersion: config.apiVersion,
                accessKeyId: config.key,
                secretAccessKey: config.secret,
                region: config.region,
                sslEnabled: config.sslEnabled,
            }),
            sendingRate: config.sendingRate,
            maxConnections: config.maxConnections,
        });
    }
    /**
     * Send message
     */
    async send(message, options) {
        if (!this.transporter) {
            throw new Error('Driver transport has been closed and cannot be used for sending emails');
        }
        return this.transporter.sendMail(Object.assign({}, message, { ses: options }));
    }
    /**
     * Close transporter connection, helpful when using connections pool
     */
    async close() {
        this.transporter.close();
        this.transporter = null;
    }
}
exports.SesDriver = SesDriver;
