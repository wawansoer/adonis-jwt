"use strict";
/*
 * @adonisjs/mail
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakeDriver = void 0;
/// <reference path="../../adonis-typings/mail.ts" />
const nodemailer_1 = __importDefault(require("nodemailer"));
const utils_1 = require("../utils");
/**
 * Smtp driver to send email using smtp
 */
class FakeDriver {
    constructor() {
        this.mails = [];
        this.transporter = nodemailer_1.default.createTransport({
            jsonTransport: true,
        });
    }
    /**
     * Find an email
     */
    find(messageOrCallback) {
        if (typeof messageOrCallback === 'function') {
            return this.mails.find(messageOrCallback) || null;
        }
        return this.mails.find((mail) => (0, utils_1.subsetCompare)(messageOrCallback, mail)) || null;
    }
    /**
     * Filter emails
     */
    filter(messageOrCallback) {
        if (typeof messageOrCallback === 'function') {
            return this.mails.filter(messageOrCallback);
        }
        return this.mails.filter((mail) => (0, utils_1.subsetCompare)(messageOrCallback, mail));
    }
    /**
     * Send message
     */
    async send(message) {
        if (!this.transporter) {
            throw new Error('Driver transport has been closed and cannot be used for sending emails');
        }
        this.mails.push(message);
        return this.transporter.sendMail(message);
    }
    /**
     * Close transporter connection, helpful when using connections pool
     */
    async close() {
        this.transporter.close();
        this.mails = [];
        this.transporter = null;
    }
}
exports.FakeDriver = FakeDriver;
