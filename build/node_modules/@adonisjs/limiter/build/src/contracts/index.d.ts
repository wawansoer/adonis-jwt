/// <reference types="@adonisjs/http-server/build/adonis-typings" />
import type { HttpContextContract } from '@ioc:Adonis/Core/HttpContext';
import type { HttpLimiterConfigBuilder } from '../config_builder';
import type { ThrottleException } from '../exceptions/throttle_exception';
export type BaseLimiterConfig = {
    keyPrefix?: string;
    clusterTimeout?: string | number;
    inmemoryBlockOnConsumed?: string | number;
    inmemoryBlockDuration?: string | number;
};
export type RedisLimiterConfig = BaseLimiterConfig & {
    client: 'redis';
    connectionName: string;
};
export type DatabaseLimiterConfig = BaseLimiterConfig & {
    client: 'db';
    dbName: string;
    tableName: string;
    connectionName: string;
    clearExpiredByTimeout?: boolean;
};
export interface LimiterBackendStores {
    db: {
        config: DatabaseLimiterConfig;
    };
    redis: {
        config: RedisLimiterConfig;
    };
}
export type StoresConfig = Record<string, {
    [K in keyof LimiterBackendStores]: LimiterBackendStores[K]['config'];
}[keyof LimiterBackendStores]>;
export type LimiterConfig<Stores extends StoresConfig> = {
    default: keyof Stores;
    stores: Stores;
};
export type RuntimeConfig = {
    requests: number;
    duration: number | string;
    blockDuration?: number | string;
};
export type LimiterResponse = {
    limit: number;
    remaining: number;
    consumed: number;
    retryAfter: number;
};
export type LimitExceededCallback = (error: ThrottleException) => void;
export type HttpLimiterFactory<Stores> = (ctx: HttpContextContract) => HttpLimiterConfigBuilder<Stores> | Promise<HttpLimiterConfigBuilder<Stores>> | null | Promise<null>;
