"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThrottleException = void 0;
const utils_1 = require("@poppinss/utils");
class ThrottleException extends utils_1.Exception {
    remaining;
    limit;
    retryAfter;
    headers = {};
    static invoke(limiterResponse, status = 429, message = 'Too many requests') {
        const error = new this(message, status, 'E_TOO_MANY_REQUESTS');
        error.limit = limiterResponse.limit;
        error.remaining = limiterResponse.remaining;
        error.retryAfter = limiterResponse.retryAfter;
        error.headers = {
            'X-RateLimit-Limit': limiterResponse.limit,
            'X-RateLimit-Remaining': limiterResponse.remaining,
            'Retry-After': Math.ceil(limiterResponse.retryAfter / 1000),
        };
        return error;
    }
    setHeaders({ response }) {
        for (let header of Object.keys(this.headers)) {
            response.header(header, this.headers[header]);
        }
    }
    respondWithJSON(ctx) {
        this.setHeaders(ctx);
        ctx.response
            .status(this.status)
            .json({ errors: [{ message: this.message, retryAfter: Math.ceil(this.retryAfter / 1000) }] });
    }
    respondWithMessage(ctx) {
        this.setHeaders(ctx);
        ctx.response.status(this.status).send(this.message);
    }
    handle(_, ctx) {
        switch (ctx.request.accepts(['json', 'html'])) {
            case 'json':
                return this.respondWithJSON(ctx);
            default:
                return this.respondWithMessage(ctx);
        }
    }
}
exports.ThrottleException = ThrottleException;
