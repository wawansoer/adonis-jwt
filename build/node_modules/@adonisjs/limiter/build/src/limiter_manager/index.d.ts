/// <reference types="@adonisjs/application/build/adonis-typings/application" />
import type { ApplicationContract } from '@ioc:Adonis/Core/Application';
import { RateLimiterMySQL, RateLimiterPostgres, RateLimiterRedis } from 'rate-limiter-flexible';
import { Limiter } from '../limiter';
import { HttpLimiterConfigBuilder } from '../config_builder';
import type { StoresConfig, RuntimeConfig, LimiterConfig, RedisLimiterConfig, HttpLimiterFactory, DatabaseLimiterConfig } from '../contracts';
export declare class LimiterManager<Stores extends any, HttpLimiters extends any> {
    application: ApplicationContract;
    private config;
    httpLimiters: HttpLimiters;
    private limiters;
    constructor(application: ApplicationContract, config: Stores extends StoresConfig ? LimiterConfig<Stores> : any, httpLimiters: HttpLimiters);
    private timeToSeconds;
    private makeStoreKey;
    protected createRedis(storeConfig: RedisLimiterConfig, config: RuntimeConfig): RateLimiterRedis;
    protected createDatabase(storeConfig: DatabaseLimiterConfig, config: RuntimeConfig): RateLimiterMySQL | RateLimiterPostgres;
    protected createLimiter(store: Extract<keyof Stores, 'string'>, config: RuntimeConfig): Limiter;
    use(config: RuntimeConfig): Limiter;
    use(store: keyof Stores, config: RuntimeConfig): Limiter;
    define<Name extends string, Callback extends HttpLimiterFactory<Stores>>(name: Name, callback: Callback): LimiterManager<Stores, HttpLimiters & {
        [K in Name]: Callback;
    }>;
    allowRequests(request: number): HttpLimiterConfigBuilder<Stores>;
    noLimit(): null;
}
