"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const standalone_1 = require("@adonisjs/core/build/standalone");
const throttle_exception_1 = require("../src/exceptions/throttle_exception");
let ThrottleMiddleware = class ThrottleMiddleware {
    limiter;
    constructor(limiter) {
        this.limiter = limiter;
    }
    getLimiter(config, store) {
        return store ? this.limiter.use(store, config) : this.limiter.use(config);
    }
    abort(limiterResponse, limitedExceededCallback) {
        const error = throttle_exception_1.ThrottleException.invoke(limiterResponse);
        if (limitedExceededCallback) {
            limitedExceededCallback(error);
        }
        throw error;
    }
    async rateLimitRequest(httpLimiter, { request, response }, configBuilder) {
        const { config, store, key, limitedExceededCallback } = configBuilder.toJSON();
        const throttleKey = `${httpLimiter}_${key || request.ip()}`;
        const limiter = this.getLimiter(config, store);
        const limiterResponse = await limiter.get(throttleKey);
        if (limiterResponse && limiterResponse.remaining < 0) {
            this.abort(limiterResponse, limitedExceededCallback);
        }
        try {
            const consumeResponse = await limiter.consume(throttleKey);
            response.header('X-RateLimit-Limit', consumeResponse.limit);
            response.header('X-RateLimit-Remaining', consumeResponse.remaining);
        }
        catch (error) {
            if (limitedExceededCallback) {
                limitedExceededCallback(error);
            }
            throw error;
        }
    }
    async handle(ctx, next, httpLimiter) {
        const configFactory = this.limiter.httpLimiters[httpLimiter];
        if (!configFactory) {
            throw new Error(`Invalid limiter "${httpLimiter}" applied on "${ctx.route.pattern}" route`);
        }
        const configBuilder = await configFactory(ctx);
        if (!configBuilder) {
            return next();
        }
        await this.rateLimitRequest(httpLimiter, ctx, configBuilder);
        return next();
    }
};
ThrottleMiddleware = __decorate([
    (0, standalone_1.inject)(['Adonis/Addons/Limiter']),
    __metadata("design:paramtypes", [Function])
], ThrottleMiddleware);
exports.default = ThrottleMiddleware;
